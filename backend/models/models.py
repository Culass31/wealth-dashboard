from pydantic import BaseModel, Field, UUID4, BeforeValidator
from typing import Optional, Literal, Annotated
from datetime import date, datetime
from decimal import Decimal

# Custom type for Decimal to handle potential string inputs
DecimalStr = Annotated[Decimal, BeforeValidator(lambda x: Decimal(str(x)))]

class InvestmentBase(BaseModel):
    user_id: UUID4
    platform: Literal['La Première Brique', 'PretUp', 'BienPrêter', 'Homunity', 'PEA', 'Assurance_Vie']
    investment_type: Literal['crowdfunding', 'stocks', 'bonds', 'funds']
    invested_amount: DecimalStr = Field(gt=0)
    investment_date: Optional[date] = None
    
    # Optional fields
    platform_id: Optional[str] = None
    asset_class: Optional[Literal['real_estate', 'equity', 'fixed_income', 'mixed']] = None
    project_name: Optional[str] = None
    company_name: Optional[str] = None
    isin: Optional[str] = None
    annual_rate: Optional[DecimalStr] = None
    duration_months: Optional[int] = None
    capital_repaid: Optional[DecimalStr] = None
    remaining_capital: Optional[DecimalStr] = None
    monthly_payment: Optional[DecimalStr] = None
    signature_date: Optional[date] = None
    expected_end_date: Optional[date] = None
    actual_end_date: Optional[date] = None
    status: Literal['active', 'completed', 'delayed', 'defaulted', 'in_procedure'] = 'active'
    is_delayed: bool = False
    is_short_term: bool = False

class InvestmentCreate(InvestmentBase):
    # ID can be generated by DB, so it's optional on creation
    id: Optional[UUID4] = None 

class InvestmentInDB(InvestmentBase):
    id: UUID4
    created_at: datetime
    updated_at: datetime

class CashFlowBase(BaseModel):
    user_id: UUID4
    platform: Literal['La Première Brique', 'PretUp', 'BienPrêter', 'Homunity', 'PEA', 'Assurance_Vie']
    flow_type: Literal['deposit', 'withdrawal', 'investment', 'repayment', 'interest', 'dividend', 'fee', 'sale', 'purchase', 'adjustment', 'other', 'tax', 'bonus']
    flow_direction: Literal['in', 'out']
    gross_amount: DecimalStr = Field(ge=0)
    transaction_date: date

    # Optional fields
    investment_id: Optional[UUID4] = None
    net_amount: Optional[DecimalStr] = None
    tax_amount: Optional[DecimalStr] = None
    capital_amount: Optional[DecimalStr] = None
    interest_amount: Optional[DecimalStr] = None
    status: Literal['completed', 'pending', 'failed'] = 'completed'
    description: Optional[str] = None
    payment_method: Optional[str] = None

class CashFlowCreate(CashFlowBase):
    id: Optional[UUID4] = None

class CashFlowInDB(CashFlowBase):
    id: UUID4
    created_at: datetime

class PortfolioPositionBase(BaseModel):
    user_id: UUID4
    platform: Literal['PEA', 'Assurance_Vie']
    asset_name: str
    valuation_date: date

    # Optional fields
    isin: Optional[str] = None
    asset_class: Optional[Literal['stock', 'etf', 'fund', 'bond']] = None
    quantity: DecimalStr = Field(ge=0)
    current_price: DecimalStr = Field(ge=0)
    market_value: DecimalStr = Field(ge=0)
    portfolio_percentage: Optional[DecimalStr] = None

class PortfolioPositionCreate(PortfolioPositionBase):
    id: Optional[UUID4] = None

class PortfolioPositionInDB(PortfolioPositionBase):
    id: UUID4
    created_at: datetime
    updated_at: datetime

class ExpertMetricCacheBase(BaseModel):
    user_id: UUID4
    metric_type: str
    calculation_date: datetime = Field(default_factory=datetime.now)

    # Optional fields
    platform: Optional[Literal['La Première Brique', 'PretUp', 'BienPrêter', 'Homunity', 'PEA', 'Assurance_Vie']] = None
    metric_value: Optional[DecimalStr] = None
    metric_percentage: Optional[DecimalStr] = None
    metric_json: Optional[dict] = None

class ExpertMetricCacheCreate(ExpertMetricCacheBase):
    id: Optional[UUID4] = None

class ExpertMetricCacheInDB(ExpertMetricCacheBase):
    id: UUID4

class FinancialGoalBase(BaseModel):
    user_id: UUID4
    goal_name: str
    goal_type: Optional[Literal['financial_freedom', 'retirement', 'purchase', 'emergency_fund']] = None
    target_amount: Optional[DecimalStr] = None
    target_date: Optional[date] = None
    monthly_contribution: Optional[DecimalStr] = None
    expected_return_rate: Optional[DecimalStr] = None
    is_active: bool = True

class FinancialGoalCreate(FinancialGoalBase):
    id: Optional[UUID4] = None

class FinancialGoalInDB(FinancialGoalBase):
    id: UUID4
    created_at: datetime

class UserPreferenceBase(BaseModel):
    user_id: UUID4

    # Optional fields
    age: Optional[int] = None
    risk_tolerance: Optional[Literal['conservative', 'moderate', 'aggressive']] = None
    investment_horizon_years: Optional[int] = None
    default_currency: Literal['EUR'] = 'EUR'
    preferred_allocation: Optional[dict] = None
    notification_settings: Optional[dict] = None

class UserPreferenceCreate(UserPreferenceBase):
    pass # user_id is primary key, so no id field

class UserPreferenceInDB(UserPreferenceBase):
    created_at: datetime
    updated_at: datetime

class LiquidityBalanceBase(BaseModel):
    user_id: UUID4
    platform: Literal['La Première Brique', 'PretUp', 'BienPrêter', 'Homunity', 'PEA', 'Assurance_Vie']
    balance_date: date
    amount: DecimalStr = Field(ge=0)

class LiquidityBalanceCreate(LiquidityBalanceBase):
    id: Optional[UUID4] = None

class LiquidityBalanceInDB(LiquidityBalanceBase):
    id: UUID4
    created_at: datetime
    updated_at: datetime
