from backend.models.database import DatabaseManager
from backend.data.parsers import LBPParser, PretUpParser, BienPreterParser, HomunityParser
import os

class DataLoader:
    """Classe principale pour charger les donn√©es des diff√©rentes plateformes"""
    
    def __init__(self):
        self.db = DatabaseManager()
        
    def load_platform_data(self, file_path: str, platform: str, user_id: str) -> bool:
        """Charger les donn√©es depuis un fichier de plateforme"""
        
        print(f"üì• Chargement des donn√©es {platform.upper()} pour l'utilisateur {user_id}")
        
        # S√©lectionner le parser appropri√©
        if platform.lower() == 'lbp':
            parser = LBPParser(user_id)
        elif platform.lower() == 'pretup':
            parser = PretUpParser(user_id)
        elif platform.lower() == 'bienpreter':
            parser = BienPreterParser(user_id)
        elif platform.lower() == 'homunity':
            parser = HomunityParser(user_id)  # NOUVEAU
        else:
            print(f"‚ùå Parser non impl√©ment√© pour la plateforme: {platform}")
            return False
        
        try:
            # Parser les donn√©es
            print(f"üîç Parsing du fichier: {file_path}")
            investissements, flux_tresorerie = parser.parse(file_path)
            
            print(f"üìä Donn√©es pars√©es: {len(investissements)} investissements, {len(flux_tresorerie)} flux de tr√©sorerie")
            
            # Ins√©rer en base de donn√©es
            succes_inv = self.db.insert_investments(investissements)
            succes_cf = self.db.insert_cash_flows(flux_tresorerie)
            
            if succes_inv and succes_cf:
                print(f"‚úÖ Chargement r√©ussi de {platform.upper()}")
                return True
            else:
                print(f"‚ö†Ô∏è  Chargement partiel de {platform.upper()}")
                return False
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des donn√©es de {platform}: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def load_all_user_files(self, user_id: str, data_folder: str = "data/raw") -> bool:
        """Charger tous les fichiers depuis le dossier de donn√©es utilisateur"""
        
        fichiers_plateformes = {
            'lbp': 'Portefeuille LPB 20250529.xlsx',
            'pretup': 'Portefeuille PretUp 20250529.xlsx',
            'bienpreter': 'Portefeuille BienPreter 20250529.xlsx',
            'homunity': 'Portefeuille Homunity 20250529.xlsx'  # AJOUT√â
        }
        
        succes_count = 0
        
        for plateforme, filename in fichiers_plateformes.items():
            file_path = os.path.join(data_folder, filename)
            if os.path.exists(file_path):
                print(f"\nüìÇ Traitement de {plateforme.upper()}...")
                if self.load_platform_data(file_path, plateforme, user_id):
                    succes_count += 1
                else:
                    print(f"‚ùå √âchec du chargement de {plateforme}")
            else:
                print(f"‚ö†Ô∏è  Fichier non trouv√©: {file_path}")
        
        print(f"\nüìã R√©sum√©: {succes_count}/{len(fichiers_plateformes)} plateformes charg√©es avec succ√®s")
        return succes_count > 0
    
    def clear_user_data(self, user_id: str) -> bool:
        """Vider toutes les donn√©es d'un utilisateur (utile pour les tests)"""
        print(f"üóëÔ∏è  Suppression des donn√©es de l'utilisateur {user_id}")
        return self.db.clear_user_data(user_id)
    
    def get_loading_summary(self, user_id: str) -> dict:
        """Obtenir un r√©sum√© des donn√©es charg√©es"""
        return self.db.get_platform_summary(user_id)

# ===== backend/models/database.py - MISE √Ä JOUR POUR AUTHENTIFICATION SIMPLIFI√âE =====
from supabase import create_client, Client
import pandas as pd
from typing import List, Dict, Any, Optional
import uuid
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

class DatabaseManager:
    """Gestionnaire de base de donn√©es Supabase avec authentification simplifi√©e"""
    
    def __init__(self):
        # R√©cup√©rer les identifiants depuis l'environnement
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_KEY")
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL et SUPABASE_KEY doivent √™tre d√©finis dans le fichier .env")
        
        try:
            self.supabase: Client = create_client(
                self.supabase_url, 
                self.supabase_key
            )
            print("‚úÖ Connexion √† Supabase r√©ussie")
        except Exception as e:
            raise ConnectionError(f"√âchec de la connexion √† Supabase: {e}")
    
    def test_connection(self) -> bool:
        """Tester la connexion √† la base de donn√©es"""
        try:
            # Test simple avec count
            result = self.supabase.table('investments').select("count").limit(1).execute()
            return True
        except Exception as e:
            print(f"Test de connexion √©chou√©: {e}")
            return False
    
    def insert_investments(self, investments: List[Dict[str, Any]]) -> bool:
        """Ins√©rer plusieurs investissements"""
        if not investments:
            print("Aucun investissement √† ins√©rer")
            return True
            
        try:
            # Nettoyer les donn√©es avant insertion
            investments_clean = []
            for inv in investments:
                inv_clean = self._clean_investment_data(inv)
                if inv_clean:
                    investments_clean.append(inv_clean)
            
            if investments_clean:
                result = self.supabase.table('investments').insert(investments_clean).execute()
                print(f"‚úÖ {len(investments_clean)} investissements ins√©r√©s")
                return True
            else:
                print("‚ö†Ô∏è  Aucun investissement valide √† ins√©rer")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'insertion des investissements: {e}")
            return False
    
    def insert_cash_flows(self, cash_flows: List[Dict[str, Any]]) -> bool:
        """Ins√©rer plusieurs flux de tr√©sorerie"""
        if not cash_flows:
            print("Aucun flux de tr√©sorerie √† ins√©rer")
            return True
            
        try:
            # Nettoyer les donn√©es avant insertion
            cash_flows_clean = []
            for cf in cash_flows:
                cf_clean = self._clean_cash_flow_data(cf)
                if cf_clean:
                    cash_flows_clean.append(cf_clean)
            
            if cash_flows_clean:
                result = self.supabase.table('cash_flows').insert(cash_flows_clean).execute()
                print(f"‚úÖ {len(cash_flows_clean)} flux de tr√©sorerie ins√©r√©s")
                return True
            else:
                print("‚ö†Ô∏è  Aucun flux de tr√©sorerie valide √† ins√©rer")  
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'insertion des flux de tr√©sorerie: {e}")
            return False
    
    def _clean_investment_data(self, investment: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Nettoyer les donn√©es d'investissement avant insertion"""
        try:
            # V√©rifier les champs obligatoires
            if not investment.get('investment_date'):
                print(f"‚ö†Ô∏è  Date d'investissement manquante pour {investment.get('project_name', 'Projet inconnu')}")
                return None
            
            if not investment.get('invested_amount') or investment.get('invested_amount') <= 0:
                print(f"‚ö†Ô∏è  Montant d'investissement invalide pour {investment.get('project_name', 'Projet inconnu')}")
                return None
            
            # Nettoyer et valider les donn√©es
            cleaned = {
                'id': investment.get('id', str(uuid.uuid4())),
                'user_id': investment.get('user_id'),
                'platform': investment.get('platform'),
                'platform_id': investment.get('platform_id'),
                'investment_type': investment.get('investment_type', 'crowdfunding'),
                'asset_class': investment.get('asset_class', 'real_estate'),
                'project_name': investment.get('project_name', ''),
                'company_name': investment.get('company_name', ''),
                'invested_amount': float(investment.get('invested_amount', 0)),
                'annual_rate': float(investment.get('annual_rate', 0)) if investment.get('annual_rate') else None,
                'investment_date': investment.get('investment_date'),
                'status': investment.get('status', 'active'),
                'created_at': investment.get('created_at'),
                'updated_at': investment.get('updated_at')
            }
            
            # Ajouter les champs optionnels seulement s'ils existent
            optional_fields = ['signature_date', 'expected_end_date', 'actual_end_date', 
                             'current_value', 'duration_months', 'sector', 'geographic_zone']
            
            for field in optional_fields:
                if investment.get(field):
                    cleaned[field] = investment[field]
            
            return cleaned
            
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage des donn√©es d'investissement: {e}")
            return None
    
    def _clean_cash_flow_data(self, cash_flow: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Nettoyer les donn√©es de flux de tr√©sorerie avant insertion"""
        try:
            # V√©rifier les champs obligatoires
            if not cash_flow.get('transaction_date'):
                print(f"‚ö†Ô∏è  Date de transaction manquante pour {cash_flow.get('description', 'Transaction inconnue')}")
                return None
            
            if not cash_flow.get('gross_amount') or cash_flow.get('gross_amount') <= 0:
                print(f"‚ö†Ô∏è  Montant invalide pour {cash_flow.get('description', 'Transaction inconnue')}")
                return None
            
            # Nettoyer et valider les donn√©es
            cleaned = {
                'id': cash_flow.get('id', str(uuid.uuid4())),
                'user_id': cash_flow.get('user_id'),
                'flow_type': cash_flow.get('flow_type', 'other'),
                'flow_direction': cash_flow.get('flow_direction', 'in'),
                'gross_amount': float(cash_flow.get('gross_amount', 0)),
                'net_amount': float(cash_flow.get('net_amount', 0)),
                'transaction_date': cash_flow.get('transaction_date'),
                'status': cash_flow.get('status', 'completed'),
                'description': cash_flow.get('description', ''),
                'created_at': cash_flow.get('created_at')
            }
            
            # Ajouter les champs optionnels
            optional_fields = ['investment_id', 'capital_amount', 'interest_amount', 
                             'fee_amount', 'tax_amount', 'expected_date', 'payment_method']
            
            for field in optional_fields:
                if cash_flow.get(field) is not None:
                    cleaned[field] = cash_flow[field]
            
            return cleaned
            
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage des donn√©es de flux: {e}")
            return None
    
    def get_user_investments(self, user_id: str, platform: Optional[str] = None) -> pd.DataFrame:
        """R√©cup√©rer les investissements utilisateur sous forme de DataFrame"""
        try:
            query = self.supabase.table('investments').select("*").eq('user_id', user_id)
            if platform:
                query = query.eq('platform', platform)
            
            result = query.execute()
            
            if result.data:
                df = pd.DataFrame(result.data)
                print(f"üìä {len(df)} investissements r√©cup√©r√©s pour l'utilisateur {user_id}")
                return df
            else:
                print(f"Aucun investissement trouv√© pour l'utilisateur {user_id}")
                return pd.DataFrame()
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des investissements: {e}")
            return pd.DataFrame()
    
    def get_user_cash_flows(self, user_id: str, start_date: Optional[str] = None) -> pd.DataFrame:
        """R√©cup√©rer les flux de tr√©sorerie utilisateur sous forme de DataFrame"""
        try:
            query = self.supabase.table('cash_flows').select("*").eq('user_id', user_id)
            if start_date:
                query = query.gte('transaction_date', start_date)
            
            result = query.execute()
            
            if result.data:
                df = pd.DataFrame(result.data)
                print(f"üí∞ {len(df)} flux de tr√©sorerie r√©cup√©r√©s pour l'utilisateur {user_id}")
                return df
            else:
                print(f"Aucun flux de tr√©sorerie trouv√© pour l'utilisateur {user_id}")
                return pd.DataFrame()
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des flux de tr√©sorerie: {e}")
            return pd.DataFrame()
    
    def clear_user_data(self, user_id: str) -> bool:
        """Supprimer toutes les donn√©es d'un utilisateur (utile pour les tests)"""
        try:
            # Supprimer dans le bon ordre √† cause des cl√©s √©trang√®res
            self.supabase.table('cash_flows').delete().eq('user_id', user_id).execute()
            self.supabase.table('portfolio_positions').delete().eq('user_id', user_id).execute()
            self.supabase.table('investments').delete().eq('user_id', user_id).execute()
            print(f"üóëÔ∏è  Toutes les donn√©es supprim√©es pour l'utilisateur {user_id}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression des donn√©es: {e}")
            return False
    
    def get_platform_summary(self, user_id: str) -> Dict[str, Any]:
        """Obtenir des statistiques de r√©sum√© par plateforme"""
        try:
            investments_df = self.get_user_investments(user_id)
            cash_flows_df = self.get_user_cash_flows(user_id)
            
            summary = {}
            
            if not investments_df.empty:
                # Statistiques par plateforme
                platform_stats = investments_df.groupby('platform').agg({
                    'invested_amount': ['sum', 'count'],
                    'status': lambda x: (x == 'active').sum()
                }).round(2)
                
                summary['plateformes'] = platform_stats.to_dict()
                summary['total_investi'] = investments_df['invested_amount'].sum()
                summary['total_projets'] = len(investments_df)
            
            if not cash_flows_df.empty:
                cash_flows_df['transaction_date'] = pd.to_datetime(cash_flows_df['transaction_date'])
                entrees = cash_flows_df[cash_flows_df['flow_direction'] == 'in']['net_amount'].sum()
                sorties = abs(cash_flows_df[cash_flows_df['flow_direction'] == 'out']['net_amount'].sum())
                
                summary['total_entrees'] = entrees
                summary['total_sorties'] = sorties
                summary['performance_nette'] = entrees - sorties
            
            return summary
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {e}")
            return {}

# Test function
def test_database_connection():
    """Fonction de test pour v√©rifier la configuration de la base de donn√©es"""
    try:
        print("üîç Test de la connexion √† la base de donn√©es...")
        db = DatabaseManager()
        
        if db.test_connection():
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie!")
            return True
        else:
            print("‚ùå Connexion √† la base de donn√©es √©chou√©e!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de configuration de la base de donn√©es: {e}")
        return False

if __name__ == "__main__":
    # Tester la connexion lors de l'ex√©cution directe de ce fichier
    test_database_connection()