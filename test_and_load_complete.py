"""
Script de test et chargement complet avec d√©bogage d√©taill√©
"""
import os
import sys
from datetime import datetime
import traceback

# Ajouter le r√©pertoire courant au PATH
sys.path.insert(0, os.getcwd())

from backend.models.database import DatabaseManager
from backend.data.data_loader import DataLoader

# ID utilisateur de test (√† remplacer par le v√¥tre)
USER_ID_TEST = "29dec51d-0772-4e3a-8e8f-1fece8fefe0e"

def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    print("üîç Test de connexion √† la base de donn√©es...")
    
    try:
        db = DatabaseManager()
        if db.test_connection():
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
        else:
            print("‚ùå Test de connexion √©chou√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def clear_existing_data():
    """Vider les donn√©es existantes pour les tests"""
    print(f"\nüóëÔ∏è  Suppression des donn√©es existantes pour l'utilisateur {USER_ID_TEST}")
    
    try:
        db = DatabaseManager()
        success = db.clear_user_data(USER_ID_TEST)
        if success:
            print("‚úÖ Donn√©es existantes supprim√©es")
        else:
            print("‚ö†Ô∏è  Probl√®me lors de la suppression (peut-√™tre aucune donn√©e √† supprimer)")
        return success
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")
        return False

def test_individual_platform(platform: str, file_path: str):
    """Tester le chargement d'une plateforme individuelle"""
    print(f"\nüìä Test de {platform.upper()}")
    print("=" * 50)
    
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return False
    
    try:
        loader = DataLoader()
        
        print(f"üìÇ Chargement du fichier: {file_path}")
        success = loader.load_platform_data(file_path, platform, USER_ID_TEST)
        
        if success:
            print(f"‚úÖ {platform.upper()} charg√© avec succ√®s")
            
            # V√©rifier les donn√©es charg√©es
            db = DatabaseManager()
            investments_df = db.get_user_investments(USER_ID_TEST, platform.upper())
            cash_flows_df = db.get_user_cash_flows(USER_ID_TEST)
            
            print(f"üìà Investissements charg√©s: {len(investments_df)}")
            print(f"üí∞ Flux de tr√©sorerie charg√©s: {len(cash_flows_df[cash_flows_df['description'].str.contains(platform.upper(), case=False, na=False)] if not cash_flows_df.empty else cash_flows_df)}")
            
            if not investments_df.empty:
                total_invested = investments_df['invested_amount'].sum()
                print(f"üí∏ Montant total investi: {total_invested:,.2f} ‚Ç¨")
                
                # Afficher quelques exemples
                print("\nüìã √âchantillon des investissements:")
                for idx, row in investments_df.head(3).iterrows():
                    print(f"  - {row.get('project_name', 'N/A')}: {row.get('invested_amount', 0):,.0f} ‚Ç¨ ({row.get('status', 'N/A')})")
            
            return True
        else:
            print(f"‚ùå √âchec du chargement de {platform.upper()}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de {platform}: {e}")
        traceback.print_exc()
        return False

def test_all_platforms():
    """Tester toutes les plateformes disponibles"""
    print("\nüéØ TEST DE TOUTES LES PLATEFORMES")
    print("=" * 60)
    
    # Configuration des fichiers
    plateformes_config = {
        'lbp': 'data/raw/Portefeuille LPB 20250529.xlsx',
        'pretup': 'data/raw/Portefeuille PretUp 20250529.xlsx', 
        'bienpreter': 'data/raw/Portefeuille BienPreter 20250529.xlsx',
        'homunity': 'data/raw/Portefeuille Homunity 20250529.xlsx'
    }
    
    success_count = 0
    total_count = len(plateformes_config)
    
    for platform, file_path in plateformes_config.items():
        if test_individual_platform(platform, file_path):
            success_count += 1
    
    print(f"\nüìä R√âSUM√â DES TESTS")
    print("=" * 30)
    print(f"Plateformes test√©es: {total_count}")
    print(f"Succ√®s: {success_count}")
    print(f"√âchecs: {total_count - success_count}")
    
    return success_count, total_count

def generate_summary_report():
    """G√©n√©rer un rapport de r√©sum√© des donn√©es charg√©es"""
    print(f"\nüìà RAPPORT DE R√âSUM√â DES DONN√âES")
    print("=" * 50)
    
    try:
        db = DatabaseManager()
        summary = db.get_platform_summary(USER_ID_TEST)
        
        if summary:
            print(f"üí∞ Total investi: {summary.get('total_investi', 0):,.2f} ‚Ç¨")
            print(f"üèóÔ∏è  Total projets: {summary.get('total_projets', 0)}")
            print(f"üí∏ Total entr√©es: {summary.get('total_entrees', 0):,.2f} ‚Ç¨")
            print(f"üìä Performance nette: {summary.get('performance_nette', 0):,.2f} ‚Ç¨")
            
            if 'plateformes' in summary:
                print("\nüìã Par plateforme:")
                for platform, stats in summary['plateformes'].items():
                    if isinstance(stats, dict) and ('invested_amount', 'sum') in stats:
                        montant = stats[('invested_amount', 'sum')]
                        nombre = stats[('invested_amount', 'count')]
                        print(f"  - {platform}: {montant:,.0f} ‚Ç¨ ({nombre} projets)")
        else:
            print("‚ö†Ô∏è  Aucune donn√©e trouv√©e pour g√©n√©rer le r√©sum√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")

def verify_data_integrity():
    """V√©rifier l'int√©grit√© des donn√©es charg√©es"""
    print(f"\nüîç V√âRIFICATION DE L'INT√âGRIT√â DES DONN√âES")
    print("=" * 50)
    
    try:
        db = DatabaseManager()
        investments_df = db.get_user_investments(USER_ID_TEST)
        cash_flows_df = db.get_user_cash_flows(USER_ID_TEST)
        
        print(f"üìä Total investissements: {len(investments_df)}")
        print(f"üí∞ Total flux de tr√©sorerie: {len(cash_flows_df)}")
        
        # V√©rifications d'int√©grit√©
        issues = []
        
        if not investments_df.empty:
            # V√©rifier les dates nulles
            null_dates = investments_df['investment_date'].isnull().sum()
            if null_dates > 0:
                issues.append(f"{null_dates} investissements avec date nulle")
            
            # V√©rifier les montants n√©gatifs ou nuls
            invalid_amounts = (investments_df['invested_amount'] <= 0).sum()
            if invalid_amounts > 0:
                issues.append(f"{invalid_amounts} investissements avec montant invalide")
            
            # V√©rifier les noms de projets vides
            empty_names = investments_df['project_name'].isnull().sum()
            if empty_names > 0:
                issues.append(f"{empty_names} investissements sans nom de projet")
        
        if not cash_flows_df.empty:
            # V√©rifier les dates de transaction nulles
            null_transaction_dates = cash_flows_df['transaction_date'].isnull().sum()
            if null_transaction_dates > 0:
                issues.append(f"{null_transaction_dates} flux avec date de transaction nulle")
            
            # V√©rifier les montants invalides
            invalid_cf_amounts = (cash_flows_df['gross_amount'] <= 0).sum()
            if invalid_cf_amounts > 0:
                issues.append(f"{invalid_cf_amounts} flux avec montant invalide")
        
        if issues:
            print("‚ö†Ô∏è  Probl√®mes d√©tect√©s:")
            for issue in issues:
                print(f"  - {issue}")
        else:
            print("‚úÖ Aucun probl√®me d'int√©grit√© d√©tect√©")
            
        return len(issues) == 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def test_dashboard_data():
    """Tester que les donn√©es sont compatibles avec le dashboard"""
    print(f"\nüìä TEST DE COMPATIBILIT√â DASHBOARD")
    print("=" * 40)
    
    try:
        # Simuler le chargement des donn√©es comme le fait le dashboard
        sys.path.append('frontend')
        from frontend.app import charger_donnees_utilisateur, calculer_metriques
        
        investments_df, cash_flows_df = charger_donnees_utilisateur(USER_ID_TEST)
        
        if investments_df.empty and cash_flows_df.empty:
            print("‚ùå Aucune donn√©e disponible pour le dashboard")
            return False
        
        print(f"‚úÖ Donn√©es charg√©es: {len(investments_df)} investissements, {len(cash_flows_df)} flux")
        
        # Tester le calcul des m√©triques
        metrics = calculer_metriques(investments_df, cash_flows_df)
        
        print("üìà M√©triques calcul√©es:")
        print(f"  - Total investi: {metrics.get('total_investi', 0):,.0f} ‚Ç¨")
        print(f"  - Performance nette: {metrics.get('performance_nette', 0):,.0f} ‚Ç¨")
        print(f"  - Taux r√©investissement: {metrics.get('taux_reinvestissement', 0):.1f}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test dashboard: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ SUITE DE TESTS COMPL√àTE - WEALTH DASHBOARD")
    print("=" * 60)
    print(f"Utilisateur de test: {USER_ID_TEST}")
    print(f"Heure de d√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # Liste des tests
    tests = [
        ("Connexion base de donn√©es", test_database_connection),
        ("Suppression donn√©es existantes", clear_existing_data),
        ("Chargement plateformes", test_all_platforms),
        ("Int√©grit√© des donn√©es", verify_data_integrity),
        ("Compatibilit√© dashboard", test_dashboard_data),
        ("Rapport de r√©sum√©", lambda: (generate_summary_report(), True)[1])
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name.upper()}")
        print("-" * 40)
        
        try:
            if test_name == "Chargement plateformes":
                success_count, total_count = test_func()
                result = success_count > 0
                results.append((test_name, result, f"{success_count}/{total_count}"))
            else:
                result = test_func()
                results.append((test_name, result, "OK" if result else "√âCHEC"))
        except Exception as e:
            print(f"‚ùå Erreur lors du test '{test_name}': {e}")
            results.append((test_name, False, f"ERREUR: {e}"))
    
    # Rapport final
    print(f"\nüéØ RAPPORT FINAL")
    print("=" * 50)
    print(f"Heure de fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nR√©sultats des tests:")
    
    passed = 0
    for test_name, success, details in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}: {details}")
        if success:
            passed += 1
    
    print(f"\nScore: {passed}/{len(results)} tests r√©ussis")
    
    if passed == len(results):
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
        print("Vous pouvez maintenant lancer le dashboard avec: python run_app.py")
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - passed} test(s) ont √©chou√©")
        print("Veuillez corriger les probl√®mes avant de continuer")
    
    return passed == len(results)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        traceback.print_exc()
        sys.exit(1)